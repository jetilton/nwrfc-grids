#!./venv/bin/python.exe
from datetime import datetime
from datetime import timedelta
import sys
import logging

import click

from Grids.Grids import Grids
from Grids.config import config


LOGGER = logging.getLogger(__name__)
FORMAT = "%(levelname)s - %(asctime)s - %(name)s - %(message)s"
logging.basicConfig(stream=sys.stderr, level=logging.INFO, format=FORMAT)


@click.group()
def cli():
    pass


@cli.command("g2dss")
@click.option("--projects", default=None)
@click.option("--start", default=None)
@click.option("--end", default=None)
@click.option("--data_types", default=None)
@click.option("--force", is_flag=True)
def g2dss(projects, start, end, data_types, force):
    fmt = "%Y%m%d"

    if not projects:
        projects = config.keys()
    else:
        projects = [s.strip() for s in projects.split(",")]

    if not data_types:
        data_types = ["QPE", "QTF", "QTE", "QPF"]
    else:
        data_types = [s.strip() for s in data_types.split(",")]

    if not end:
        end = datetime.now()
    else:
        end = datetime.strptime(end, fmt)

    if not start:
        start = end
    else:
        start = datetime.strptime(start, fmt)
    delta = end - start
    g = Grids()
    for data_type in data_types:
        for i in range(delta.days + 1):
            date = (start + timedelta(days=i)).strftime(fmt)
            try:
                g.get_grid(data_type=data_type, date=date, force=force)
                g.warp()
            except:
                LOGGER.error(f"Fatal error for {data_type} {date} ", exc_info=True)
                continue
            for project in projects:
                g.clip_to_dss(project=project)


if __name__ == "__main__":
    cli()
